<<<<<<< HEAD
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { initializeBot, bot, getBot } from "./bot";
=======
  import express, { type Request, Response, NextFunction } from "express";
  import { registerRoutes } from "./routes";
  import { setupVite, serveStatic, log } from "./vite";
  import { initializeBot, bot, getBot } from "./bot";
>>>>>>> a830065 (Connect the Telegram bot to the application to process user interactions)

  const app = express();
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));

<<<<<<< HEAD
// ✅ Telegram webhook route (must come AFTER `app` is created)
app.post('/telegram', (req, res) => {
  bot?.processUpdate(req.body);
  res.sendStatus(200);
});

// Add CORS headers for Replit preview
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  }
  next();
});

// Log API responses
app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }
      log(logLine);
    }
=======
  // ✅ Telegram webhook route (must come AFTER `app` is created)
  app.post('/telegram', (req, res) => {
    bot?.processUpdate(req.body);
    res.sendStatus(200);
>>>>>>> a830065 (Connect the Telegram bot to the application to process user interactions)
  });

  // Add CORS headers for Replit preview
  app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
    if (req.method === 'OPTIONS') {
      return res.sendStatus(200);
    }
    next();
  });

  // Log API responses
  app.use((req, res, next) => {
    const start = Date.now();
    const path = req.path;
    let capturedJsonResponse: Record<string, any> | undefined = undefined;

<<<<<<< HEAD
  // ✅ Start bot (webhook mode only)
  if (process.env.BOT_DISABLED !== 'true') {
    initializeBot().catch(err => {
      console.error('Bot initialization error:', err.message);
=======
    const originalResJson = res.json;
    res.json = function (bodyJson, ...args) {
      capturedJsonResponse = bodyJson;
      return originalResJson.apply(res, [bodyJson, ...args]);
    };

    res.on("finish", () => {
      const duration = Date.now() - start;
      if (path.startsWith("/api")) {
        let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
        if (capturedJsonResponse) {
          logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
        }
        if (logLine.length > 80) {
          logLine = logLine.slice(0, 79) + "…";
        }
        log(logLine);
      }
>>>>>>> a830065 (Connect the Telegram bot to the application to process user interactions)
    });

<<<<<<< HEAD
  // Cleanup on exit
  const cleanup = async () => {
    console.log('Cleaning up bot instance...');
    const bot = getBot();
    if (bot) {
      try {
        bot.removeAllListeners();
      } catch (error) {
        console.error('Error during cleanup:', error);
      }
=======
    next();
  });

  (async () => {
    const server = await registerRoutes(app);

    // ✅ Start bot (webhook mode only)
    if (process.env.BOT_DISABLED !== 'true') {
      initializeBot().catch(err => {
        console.error('Bot initialization error:', err.message);
      });
>>>>>>> a830065 (Connect the Telegram bot to the application to process user interactions)
    }

    // Cleanup on exit
    const cleanup = async () => {
      console.log('Cleaning up bot instance...');
      const bot = getBot();
      if (bot) {
        try {
          bot.removeAllListeners();
        } catch (error) {
          console.error('Error during cleanup:', error);
        }
      }
      process.exit(0);
    };

<<<<<<< HEAD
  // Global error handler
  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });

  // Serve frontend
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // Start Express
  const port = 5000;
  server.listen({ port, host: "0.0.0.0", reusePort: true }, () => {
    log(`serving on port ${port}`);
  });
})();
=======
    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);

    // Global error handler
    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
      const status = err.status || err.statusCode || 500;
      const message = err.message || "Internal Server Error";
      res.status(status).json({ message });
      throw err;
    });

    // Serve frontend
    if (app.get("env") === "development") {
      await setupVite(app, server);
    } else {
      serveStatic(app);
    }

    // Start Express
    const port = 5000;
    server.listen({ port, host: "0.0.0.0", reusePort: true }, () => {
      log(`serving on port ${port}`);
    });
  })();

>>>>>>> a830065 (Connect the Telegram bot to the application to process user interactions)
