declare const INTRO_ART = "\n\n\n    \u259F\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2599\n    \u2588\u2588          \u2588\u2588\n    \u2588\u2588    \u2597\u2585\u2596   \u2588\u2588       https://neon.com\n    \u2588\u2588    \u2588\u2588\u2588\u2588\u2599 \u2588\u2588       \u251C\u2500\u2500 /docs\n    \u2588\u2588    \u2588\u2588 \u259C\u2588\u2588\u2588\u2588       \u2514\u2500\u2500 /discord\n    \u2588\u2588    \u2588\u2588   \u259C\u2588\u259B\n    \u259C\u2588\u2588\u2588\u2588\u2588\u2588\u259B\n\n\n";
declare const messages: {
    /**
     * these messages must be short and concise
     * exceeding 2 lines trigger a rendering issue
     * in @clack/prompts
     *
     * @see https://github.com/bombshell-dev/clack/issues/132
     */
    readonly welcome: "Welcome! Let's get you set with a Postgres database on Neon. \n";
    readonly generating: "Generating your database... ";
    readonly envKeyExistsExit: "Please try again or select a different key for your connection string.";
    readonly connectionString: (s: string) => string;
    readonly poolerString: (s: string) => string;
    readonly botCheck: (url: string) => string;
    readonly envSuccess: (dotEnvFile: string, dotEnvKey: string) => string;
    readonly happyCoding: "Happy coding! ðŸš€";
    readonly databaseGenerated: (url: string) => string;
    readonly questions: {
        readonly dotEnvFilePath: `Enter the path to your environment file (default: ${string})`;
        readonly dotEnvKey: `Enter the key for the database connection string (default: ${string})`;
        readonly seedPath: `Enter the path to your seed (.sql) file (default: ${string})`;
    };
    readonly info: {
        readonly dotEnvFileNotFound: "No .env file found, creating one.";
        readonly userCancelled: "Prompt cancelled by user.";
        readonly defaultEnvKey: (dotEnvKey: string) => string;
        readonly defaultEnvFilePath: (dotEnvPath: string) => string;
    };
    readonly errors: {
        readonly invalidEnvFile: "Invalid .env file format \n";
        readonly envKeyExists: (dotEnvKey: string, dotEnvFile: string) => string;
        readonly failedToParseEnvFile: "Failed to parse .env file";
        readonly failedToWriteEnvFile: "Failed to write .env file";
        readonly failedToGenerateDatabase: "Failed to generate database";
        readonly failedToOpenBrowser: "Failed to open browser";
        readonly failedToCreateClaimableDatabase: "Failed to create claimable database";
        readonly failedToCreatePoolerString: "Failed to create pooler string";
        readonly failedToSaveConnectionString: "Failed to save connection string";
        readonly failedToSavePoolerString: "Failed to save pooler string";
        readonly failedToSaveEnvFile: "Failed to save .env file";
    };
};

export { INTRO_ART, messages };
